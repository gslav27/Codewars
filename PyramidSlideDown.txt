--- var1 CodeWars ---
function longestSlideDown (pyramid) {
  return pyramid.reduceRight((last,current) => current.map((v,i) => v+Math.max(last[i],last[i+1])))
  [0];
}




--- var2 ---
function longestSlideDown (pyramid) {
  let counter = 0;
  let counterIf = 0;
  let allSlides = [];
  allSlides = [[...pyramid[0]]];
  for (let i = 0; i < pyramid.length - 1; i++) {
    for (let j = 0; j < pyramid[i].length; j++) {
        allSlides.forEach((arr, ind) => {
          ++counter
          if (arr[arr.length-1] === pyramid[i][j] && arr[i] === pyramid[i][j]) counterIf++
          if (arr[arr.length-1] === pyramid[i][j] && arr[i] === pyramid[i][j]) {
            allSlides.push([...allSlides[ind],pyramid[i+1][j+1]])
            allSlides[ind].push(pyramid[i+1][j]);
          }
        })
    }
  }

  console.log('counter =', counter, 'counterIf =', counterIf);
  console.log(Math.max(...allSlides.map(slideDown => slideDown.reduce((acc, num) => acc + num))));
  return Math.max(...allSlides.map(slideDown => slideDown.reduce((acc, num) => acc + num)))
}



--- var3 ---
function longestSlideDown (pyramid) {
  let counter0 = 0,
    counter = 0,
    counter2 = 0,
    all,
    numMatches = [[1]],
    currentPlus = [...pyramid[0]];

  for (let i = 1; i < pyramid.length; i++) {
    let curInd = 1;
    let curPosCounter = 0;
    counter0++;
    numMatches[i] = Array(i+1).fill(0).map((val,ind)=>{
      ++counter2
      let x = numMatches[i-1][ind-1] || 0, 
        y = numMatches[i-1][ind] || 0;
      return (x + y)
    });

    all = currentPlus.reduce((acc, cur, ind, arr) => {
      ++counter;
      if (!ind) {
        return [cur + pyramid[i][ind], cur + pyramid[i][ind+1]];
      } else if (ind === arr.length - 1) {
        return [...acc, cur + pyramid[i][pyramid[i].length - 2], cur + pyramid[i][pyramid[i].length - 1]];
      } else {
        if (!(++curPosCounter <= numMatches[i-1][curInd])) {++curInd, curPosCounter=1}
        let sliceInd = acc.length-curPosCounter+1-(curInd / (numMatches[i-1].length-1) > 0.5 ? 1 : 0);
        return [
          ...acc.slice(0, sliceInd),
          cur + pyramid[i][curInd],
          ...acc.slice(sliceInd),
          cur + pyramid[i][curInd+1]
        ];
      }
    }, []);
    currentPlus = [...all];
  }
  console.log('counter0 =', counter0, 'counter =', counter, 'counter2 =', counter2);
  console.log(Math.max(...all));
  return Math.max(...all)
}